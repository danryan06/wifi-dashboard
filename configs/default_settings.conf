# =============================================================================
# Wi-Fi Test Dashboard - Configuration File (Optimized)
# =============================================================================
# Version: 5.1.0-optimized
# This file controls all configurable parameters for the traffic generation
# and monitoring system. Changes take effect after restarting services.
#
# Quick restart all services:
#   sudo systemctl restart wired-test wifi-good wifi-bad wifi-dashboard
# =============================================================================

# =============================================================================
# INTERFACE ASSIGNMENTS
# =============================================================================
# Network interfaces used for each client type
# These are typically auto-detected during installation, but can be overridden

WIRED_INTERFACE="eth0"
WIFI_GOOD_INTERFACE="wlan0"
WIFI_BAD_INTERFACE="wlan1"

# =============================================================================
# DHCP HOSTNAME CONFIGURATION
# =============================================================================
# What each client identifies as in DHCP requests (visible in Mist dashboard)
# These names help distinguish between the three clients in the Mist UI

WIRED_HOSTNAME="CNXNMist-Wired"
WIFI_GOOD_HOSTNAME="CNXNMist-WiFiGood"
WIFI_BAD_HOSTNAME="CNXNMist-WiFiBad"

# =============================================================================
# TRAFFIC INTENSITY CONFIGURATION
# =============================================================================
# Controls how much traffic each interface generates
# Options: light | medium | heavy
#
# Light:  10MB downloads, 1MB uploads, 1-2 concurrent, 120s cycles
# Medium: 25-50MB downloads, 2.5-5MB uploads, 2-3 concurrent, 60s cycles
# Heavy:  50-100MB downloads, 5-10MB uploads, 3-5 concurrent, 30s cycles
#
# Recommended settings by Pi model:
#   Pi 3B+: eth0=medium, wlan0=light, wlan1=light
#   Pi 4 (2GB): eth0=heavy, wlan0=medium, wlan1=light
#   Pi 4 (4GB+): eth0=heavy, wlan0=heavy, wlan1=light
#   Pi 5: eth0=heavy, wlan0=heavy, wlan1=medium

ETH0_TRAFFIC_INTENSITY="heavy"
WLAN0_TRAFFIC_INTENSITY="medium"
WLAN1_TRAFFIC_INTENSITY="light"

# =============================================================================
# SERVICE REFRESH INTERVALS (seconds)
# =============================================================================
# How often each service runs its main loop
# Lower = more frequent checks/traffic, higher = less CPU usage

WIRED_REFRESH_INTERVAL="30"        # Wired client main loop interval
WIFI_GOOD_REFRESH_INTERVAL="60"    # Wi-Fi good client main loop interval
WIFI_BAD_REFRESH_INTERVAL="45"     # Wi-Fi bad client auth failure interval

# =============================================================================
# WI-FI ROAMING CONFIGURATION (Good Client Only)
# =============================================================================
# Controls how and when the Wi-Fi good client roams between access points

# Enable/disable roaming functionality
WIFI_ROAMING_ENABLED="true"

# Minimum time (seconds) between roaming attempts
# Prevents excessive roaming that could disrupt traffic
ROAMING_INTERVAL="60"

# How often to scan for available BSSIDs
ROAMING_SCAN_INTERVAL="10"

# Minimum signal strength (dBm) to consider for roaming
# BSSIDs below this threshold are ignored
# Typical values: -75 to -65 dBm
MIN_SIGNAL_THRESHOLD="-75"

# Minimum signal improvement (dBm) required to trigger roaming
# Must see at least this much better signal to roam
# Example: If current AP is -60dBm, new AP must be -55dBm or better
ROAMING_SIGNAL_DIFF="5"

# Wi-Fi band preference for roaming
# Options: 2.4ghz | 5ghz | both
WIFI_BAND_PREFERENCE="both"

# =============================================================================
# DEMO MODE CONFIGURATION
# =============================================================================
# Demo mode enables opportunistic roaming for PoC demonstrations
# When all APs have similar signal strength, this enables time-based roaming
# to demonstrate the roaming capability in the Mist dashboard

DEMO_MODE="true"

# Time (seconds) between opportunistic roaming attempts in demo mode
# Only triggers when no better signal is available
# Typical values: 120-300 seconds (2-5 minutes)
OPPORTUNISTIC_ROAMING_INTERVAL="180"

# =============================================================================
# INTEGRATED TRAFFIC CONTROL
# =============================================================================
# Enable/disable integrated traffic generation within the Wi-Fi good client
# When true, traffic is generated as part of the roaming client script
# When false, only connection/roaming functionality is active

WIFI_GOOD_INTEGRATED_TRAFFIC="true"

# =============================================================================
# CONNECTION TIMEOUT SETTINGS
# =============================================================================
# Maximum time to wait for various network operations

WIFI_CONNECTION_TIMEOUT="30"       # Timeout for Wi-Fi connection attempts (seconds)
WIFI_MAX_RETRY_ATTEMPTS="3"        # Number of times to retry failed connections

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Controls log file sizes and rotation

MAX_LOG_SIZE_BYTES="10485760"      # 10MB - rotate logs when they exceed this size
LOG_MAX_SIZE_MB="10"               # Alternative MB-based limit for rotation utilities

# =============================================================================
# ADVANCED: NETWORK EMULATION (NETEM) DEFAULTS
# =============================================================================
# Default netem parameters - typically set via dashboard UI or apply_netem.sh
# These are only used if netem is enabled via the dashboard
#
# Latency (milliseconds): Additional delay for packets
# Loss (percent): Percentage of packets to drop
# Jitter (milliseconds): Variation in latency
# Bandwidth (Mbit/s): Maximum throughput limit

# Per-interface netem defaults (0 = disabled)
ETH0_NETEM_LATENCY="0"
ETH0_NETEM_LOSS="0"
ETH0_NETEM_JITTER="0"
ETH0_NETEM_BANDWIDTH="0"

WLAN0_NETEM_LATENCY="0"
WLAN0_NETEM_LOSS="0"
WLAN0_NETEM_JITTER="0"
WLAN0_NETEM_BANDWIDTH="0"

WLAN1_NETEM_LATENCY="0"
WLAN1_NETEM_LOSS="0"
WLAN1_NETEM_JITTER="0"
WLAN1_NETEM_BANDWIDTH="0"

# =============================================================================
# ADVANCED: SYSTEMD SERVICE TUNING
# =============================================================================
# These settings affect systemd service behavior
# Only modify if you understand systemd unit configuration

# Service startup delay (to avoid hostname conflicts)
SERVICE_STARTUP_DELAY="0"          # Set to 0 with optimized scripts (no locks needed)

# Service restart behavior
SERVICE_RESTART_SEC="10"           # Wait 10s before restart on failure
SERVICE_MAX_RESTARTS="5"           # Max restart attempts in 300s window

# =============================================================================
# ADVANCED: DOWNLOAD/UPLOAD TARGETS
# =============================================================================
# You can customize the URLs used for traffic generation by editing the
# DOWNLOAD_URLS and PING_TARGETS arrays in each traffic script directly
#
# Default download sources (fast, reliable mirrors):
#   - Hetzner speed test servers
#   - OVH proof files  
#   - ThinkBroadband test files
#
# Default ping targets:
#   - 8.8.8.8 (Google DNS)
#   - 1.1.1.1 (Cloudflare DNS)
#   - 208.67.222.222 (OpenDNS)
#   - 9.9.9.9 (Quad9 DNS)

# =============================================================================
# ADVANCED: STATS TRACKING
# =============================================================================
# Stats are now tracked via kernel counters with baseline snapshots
# These files are automatically managed:
#
#   stats_eth0.json           - Persistent cumulative totals
#   stats_eth0.json.baseline  - Kernel counter baseline snapshot
#   stats_wlan0.json          - Persistent cumulative totals
#   stats_wlan0.json.baseline - Kernel counter baseline snapshot
#   stats_wlan1.json          - Persistent cumulative totals
#   stats_wlan1.json.baseline - Kernel counter baseline snapshot
#
# To reset stats for an interface:
#   rm /home/pi/wifi_test_dashboard/stats/stats_eth0.json*
#   sudo systemctl restart wired-test.service

# =============================================================================
# DASHBOARD CONFIGURATION
# =============================================================================
# Flask web dashboard settings

DASHBOARD_PORT="5000"              # Web UI port (default: 5000)
DASHBOARD_HOST="0.0.0.0"           # Listen on all interfaces

# =============================================================================
# NOTES
# =============================================================================
# 1. After modifying this file, restart affected services:
#    sudo systemctl restart wired-test wifi-good wifi-bad
#
# 2. To apply changes immediately without restart:
#    sudo systemctl reload wifi-good  (not all settings support reload)
#
# 3. View current settings:
#    cat /home/pi/wifi_test_dashboard/configs/settings.conf
#
# 4. View service status:
#    sudo systemctl status wired-test wifi-good wifi-bad
#
# 5. View live logs:
#    sudo journalctl -u wired-test -f
#    sudo journalctl -u wifi-good -f
#    sudo journalctl -u wifi-bad -f
#
# 6. Check stats:
#    cat /home/pi/wifi_test_dashboard/stats/stats_*.json
#
# 7. Apply network emulation:
#    sudo /home/pi/wifi_test_dashboard/scripts/apply_netem.sh wlan0 50 5
#
# 8. Remove network emulation:
#    sudo /home/pi/wifi_test_dashboard/scripts/apply_netem.sh wlan0 0 0
#
# =============================================================================